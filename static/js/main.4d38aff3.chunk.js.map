{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dColors","blue","yellow","cerise","brown","green","randomColor","colorKeys","Object","keys","key","Math","floor","random","length","createGrid","height","width","oldGrid","arguments","undefined","grid","toConsumableArray","Array","fill","map","row","forEach","y","cell","x","App","_useState","useState","_useState2","slicedToArray","setWidth","_useState3","_useState4","setHeight","_useState5","_useState6","pngScale","setPngScale","_useState7","_useState8","pngWidth","setPngWidth","_useState9","_useState10","pngHeight","setPngHeight","_useState11","_useState12","setGrid","_useState13","_useState14","svg","setSvg","_useState15","_useState16","ctx","setCtx","useEffect","img","Image","onload","clearRect","imageSmoothingEnabled","drawImage","src","getCellColor","Logo","_ref","placeholders","react_default","a","createElement","ref","elem","encodeURIComponent","XMLSerializer","serializeToString","viewBox","concat","xmlns","className","column","onClick","e","empty","gridCopy","JSON","parse","stringify","rc","includes","assignCellColor","shiftKey","Fragment","type","min","max","onChange","value","Number","target","href","download","getContext","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d38aff3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst dColors = {\n  blue: \"#20407C\",\n  yellow: \"#F7E623\",\n  cerise: \"#E5398D\",\n  brown: \"#754022\",\n  green: \"#70BD44\"\n};\n\nconst randomColor = () => {\n  const colorKeys = Object.keys(dColors);\n  const randomNumber = Math.floor(Math.random() * colorKeys.length);\n  const key = colorKeys[randomNumber];\n  return dColors[key];\n};\n\nconst createGrid = (height, width, oldGrid = null) => {\n  let grid = [...Array(height).fill([...Array(width)].fill(null))];\n\n  // Rows need to be remade as all rows are a refrence to the same array\n  // with the array.fill method.\n  grid = grid.map(row => [...row]);\n  if (oldGrid) {\n    grid.forEach((row, y) => {\n      if (y < oldGrid.length)\n        row.forEach((cell, x) => {\n          if (x < oldGrid[y].length && oldGrid[y][x] !== null)\n            grid[y][x] = oldGrid[y][x];\n        });\n    });\n  }\n\n  return grid;\n};\n\nfunction App() {\n  const [width, setWidth] = useState(12);\n  const [height, setHeight] = useState(12);\n  const [pngScale, setPngScale] = useState(5);\n  const [pngWidth, setPngWidth] = useState(width * 50);\n  const [pngHeight, setPngHeight] = useState(height * 50);\n  const [grid, setGrid] = useState(createGrid(width, height));\n  const [svg, setSvg] = useState(null);\n  const [ctx, setCtx] = useState(null);\n\n  useEffect(() => {\n    setPngHeight((height * 10 + height - 1) * pngScale);\n    setPngWidth((width * 10 + width - 1) * pngScale);\n  }, [width, height, pngScale]);\n\n  useEffect(() => {\n    if (!ctx) return;\n    var img = new Image();\n    img.onload = () => {\n      ctx.clearRect(0, 0, pngWidth, pngHeight);\n      ctx.imageSmoothingEnabled = false;\n      ctx.drawImage(img, 0, 0, pngWidth, pngHeight);\n    };\n    img.src = svg;\n  }, [svg, pngHeight, pngWidth, ctx]);\n\n  const getCellColor = (x, y) => {\n    if (x < 0 || x >= width || y < 0 || y >= height) return null;\n    return grid[y][x];\n  };\n  const assignCellColor = (x, y, empty = false) => {\n    // ugly deep copy solution but it works lol.\n    const gridCopy = JSON.parse(JSON.stringify(grid));\n\n    let rc = randomColor();\n    while (\n      [\n        getCellColor(x, y - 1),\n        getCellColor(x, y + 1),\n        getCellColor(x - 1, y),\n        getCellColor(x + 1, y)\n      ].includes(rc)\n    ) {\n      rc = randomColor();\n    }\n\n    if (empty) rc = null;\n\n    gridCopy[y][x] = rc;\n    setGrid(gridCopy);\n  };\n\n  const Logo = ({ placeholders, setSvg }) => (\n    <svg\n      ref={elem => {\n        if (setSvg && elem) {\n          setSvg(\n            \"data:image/svg+xml,\" +\n              encodeURIComponent(new XMLSerializer().serializeToString(elem))\n          );\n        }\n      }}\n      viewBox={`0 0 ${width * 10 + width - 1} ${height * 10 + height - 1}`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={placeholders && \"with-placeholders\"}\n    >\n      {grid.map((column, y) =>\n        column.map((cell, x) =>\n          placeholders || getCellColor(x, y) ? (\n            <rect\n              key={`x${x}y${y}`}\n              x={x + x * 10}\n              y={y + y * 10}\n              onClick={e => placeholders && assignCellColor(x, y, e.shiftKey)}\n              width=\"10\"\n              height=\"10\"\n              fill={cell ? cell : \"#f8f8f8\"}\n            />\n          ) : (\n            <></>\n          )\n        )\n      )}\n    </svg>\n  );\n\n  return (\n    <div className=\"app\">\n      <div className=\"editor\">\n        <div>\n          <h2>Editor</h2>\n          <p>Hold shift to remove square.</p>\n          <label>\n            Width: ({width})\n            <input\n              type=\"range\"\n              min={1}\n              max={100}\n              onChange={e => {\n                const value = Number(e.target.value);\n                setGrid(createGrid(height, value, grid));\n                setWidth(value);\n              }}\n              value={width}\n            />\n          </label>\n          <label>\n            Height: ({height})\n            <input\n              type=\"range\"\n              min={1}\n              max={100}\n              onChange={e => {\n                const value = Number(e.target.value);\n                setGrid(createGrid(value, width, grid));\n                setHeight(value);\n              }}\n              value={height}\n            />\n          </label>\n        </div>\n        <div>\n          <Logo placeholders />\n        </div>\n      </div>\n      <div className=\"svg-preview\">\n        <div>\n          <h2>SVG-preview</h2>\n          {svg && (\n            <p>\n              <a href={svg} download=\"logo.svg\">\n                Download\n              </a>\n            </p>\n          )}\n        </div>\n        <div>\n          <Logo setSvg={setSvg} />\n        </div>\n      </div>\n      <div className=\"png-preview\">\n        <div>\n          <h2>PNG-preview</h2>\n          <p>Right click to download.</p>\n          <label>\n            PNG scale: ({pngScale}, current size is {pngWidth}x{pngHeight})\n            <input\n              type=\"range\"\n              min={1}\n              max={20}\n              onChange={e => setPngScale(Number(e.target.value))}\n              value={pngScale}\n            />\n          </label>\n        </div>\n        <div>\n          <canvas\n            ref={elem => elem && setCtx(elem.getContext(\"2d\"))}\n            width={pngWidth}\n            height={pngHeight}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}