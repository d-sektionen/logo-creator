{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dColors","blue","yellow","cerise","brown","green","randomColor","colorKeys","Object","keys","key","Math","floor","random","length","App","_useState","useState","_useState2","slicedToArray","width","_useState3","_useState4","height","_useState5","_useState6","pngWidth","_useState7","_useState8","pngHeight","_useState9","toConsumableArray","Array","fill","_useState10","grid","setGrid","_useState11","_useState12","svg","setSvg","_useState13","_useState14","ctx","setCtx","useEffect","img","Image","onload","clearRect","drawImage","src","getCellColor","x","y","Logo","_ref","placeholders","react_default","a","createElement","ref","elem","encodeURIComponent","XMLSerializer","serializeToString","viewBox","concat","xmlns","className","map","column","cell","onClick","e","empty","arguments","undefined","gridCopy","JSON","parse","stringify","rc","includes","assignCellColor","shiftKey","Fragment","href","download","getContext","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cd36b19.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst dColors = {\n  blue: \"#20407C\",\n  yellow: \"#F7E623\",\n  cerise: \"#E5398D\",\n  brown: \"#754022\",\n  green: \"#70BD44\"\n};\n\nconst randomColor = () => {\n  const colorKeys = Object.keys(dColors);\n  const randomNumber = Math.floor(Math.random() * colorKeys.length);\n  const key = colorKeys[randomNumber];\n  return dColors[key];\n};\n\nfunction App() {\n  const [width, setWidth] = useState(10);\n  const [height, setHeight] = useState(10);\n  const [pngWidth, setPngWidth] = useState(width * 50);\n  const [pngHeight, setPngHeight] = useState(height * 50);\n  const [grid, setGrid] = useState([\n    ...Array(height).fill([...Array(width)].fill(null))\n  ]);\n  const [svg, setSvg] = useState(null);\n  const [ctx, setCtx] = useState(null);\n\n  useEffect(() => {\n    if (!ctx) return;\n    var img = new Image();\n    img.onload = () => {\n      ctx.clearRect(0, 0, pngWidth, pngHeight);\n      ctx.drawImage(img, 0, 0, pngWidth, pngHeight);\n    };\n    img.src = svg;\n  }, [svg, pngHeight, pngWidth, ctx]);\n\n  const getCellColor = (x, y) => {\n    if (x < 0 || x >= width || y < 0 || y >= height) return null;\n    return grid[y][x];\n  };\n  const assignCellColor = (x, y, empty = false) => {\n    // ugly deep copy solution but it works lol.\n    const gridCopy = JSON.parse(JSON.stringify(grid));\n\n    let rc = randomColor();\n    while (\n      [\n        getCellColor(x, y - 1),\n        getCellColor(x, y + 1),\n        getCellColor(x - 1, y),\n        getCellColor(x + 1, y)\n      ].includes(rc)\n    ) {\n      rc = randomColor();\n    }\n\n    if (empty) rc = null;\n\n    gridCopy[y][x] = rc;\n    setGrid(gridCopy);\n  };\n\n  const Logo = ({ placeholders, setSvg }) => (\n    <svg\n      ref={elem => {\n        if (setSvg && elem) {\n          setSvg(\n            \"data:image/svg+xml,\" +\n              encodeURIComponent(new XMLSerializer().serializeToString(elem))\n          );\n        }\n      }}\n      viewBox={`0 0 ${width * 10 + width - 1} ${height * 10 + height - 1}`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={placeholders && \"with-placeholders\"}\n    >\n      {grid.map((column, y) =>\n        column.map((cell, x) =>\n          placeholders || getCellColor(x, y) ? (\n            <rect\n              key={`x${x}y${y}`}\n              x={x + x * 10}\n              y={y + y * 10}\n              onClick={e => placeholders && assignCellColor(x, y, e.shiftKey)}\n              width=\"10\"\n              height=\"10\"\n              fill={cell ? cell : \"#f8f8f8\"}\n            />\n          ) : (\n            <></>\n          )\n        )\n      )}\n    </svg>\n  );\n\n  return (\n    <div className=\"app\">\n      <div className=\"editor\">\n        <div>\n          <h2>Editor</h2>\n          <p>Hold shift to remove square.</p>\n        </div>\n        <div>\n          <Logo placeholders />\n        </div>\n      </div>\n      <div className=\"svg-preview\">\n        <div>\n          <h2>SVG-preview</h2>\n          {svg && (\n            <p>\n              <a href={svg} download=\"logo.svg\">\n                Download\n              </a>\n            </p>\n          )}\n        </div>\n        <div>\n          <Logo setSvg={setSvg} />\n        </div>\n      </div>\n      <div className=\"png-preview\">\n        <div>\n          <h2>PNG-preview</h2>\n          <p>Right click to download.</p>\n        </div>\n        <div>\n          <canvas\n            ref={elem => elem && setCtx(elem.getContext(\"2d\"))}\n            width={pngWidth}\n            height={pngHeight}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}